
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>

#include "Control2.hpp"
#include "Geodesic.hpp"
#include "Ion.hpp"
#include "Molecule.hpp"
#include "Parallel.hpp"
#include "Pneb.hpp"
#include "pspw_lmbfgs.hpp"
#include "util_date.hpp"
#include "util_linesearch.hpp"

namespace pwdft {

/******************************************
 *                                        *
 *            cgsd_bybminimize0           *
 *                                        *
 ******************************************/
double cgsd_bybminimize0(Molecule &mymolecule,
                         double *E, double *deltae,
                         int iterations) 
{

   //iterations = control_H1_it_in()
   //it_out     = control_H1_it_out()
   //it_ortho   = control_H1_it_ortho()

   bool done = false;
   double tmin = 0.0;
   double deltat_min = 1.0e-2;
   double deltat;
   double sum0, sum1, scale, total_energy;
   double dE, max_sigma, min_sigma;
   double Eold, dEold, Enew;
   double tmin0, deltae0;

   Pneb *mygrid = mymolecule.mygrid;

   double ks_deltae = tole;
   int ispin = mygrid->ispin;
   int *neq = mygrid->neq;
   double *vall = mygrid->r_nalloc(ispin);
   mymolecule.gen_vall();
   mymolecule.get_vall(vall);

   /* get the initial gradient and direction */
   double e0 = mymolecule.psi_KS_update(ks_it_in,ks_deltae,perror,vall,
                                        ispin, neq, mymolecule.psi1,
                                        deltae, std::cout);

   // Making an extra call to electron.run and energy
   total_energy = mymolecule.gen_all_energies();

   return total_energy;
}

} // namespace pwdft
